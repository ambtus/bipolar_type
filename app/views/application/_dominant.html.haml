%p I want to #{link_to behavior.opposite.name, behavior.opposite.path} but that’s hard for me. In order to make it easier, I balance it with #{link_to behavior.displacer.name, behavior.displacer.path}. But that displaces #{link_to behavior.name, behavior.path} and I no longer feel the need to #{link_to behavior.balancer.name, behavior.balancer.path}. So I don’t. And I become #{behavior.balancer.my_problem}.

%p For example, in order to #{behavior.opposite.eg.more}, I have to #{behavior.displacer.eg.more}. When I #{behavior.displacer.eg.more}, I #{behavior.eg.fewer}. When I #{behavior.eg.fewer}, I stop #{behavior.balancer.eg.ing} which #{behavior.unbalance.s} my #{behavior.assets}.

%p First, I have to consciously remember to #{behavior.balancer.eg} so I can #{behavior.fix} my #{behavior.assets}. Then I can #{behavior.displacer.eg.more} so I can #{behavior.opposite.eg.more}. And if I #{behavior.balancer.eg.even_more}, I can still #{behavior.eg} when I want to without #{behavior.destroying} my #{behavior.assets_eg}.

%ol
  %li.green #{behavior.balancer.name} #{behavior.balancer.when_words}
  %li.green #{behavior.displacer.name} #{behavior.displacer.when_words}
  %li.yellow <em>If</em> you have done the first two, you can #{behavior.opposite.name} #{behavior.opposite.when_words}
  %li.red <em>When</em> your #{behavior.assets.are} finally healthy again (it may take a while) you can #{behavior.name} #{behavior.when_words("less")}
