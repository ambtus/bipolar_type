- content_for(:title, @type.name)
%table
  %tr
    %td
      =@type.behaviors.first.problem_names
      %p=link_to @type.behaviors.first.bad, behavior_path("U#{@type.A.symbol}E"), class: "external"
      %p=link_to @type.behaviors.third.good, behavior_path("U#{@type.C.symbol}E"), class: "external"

    %td #{@type.A.name} & #{@type.B.name} #{GenericProblem.M.name}

    %td
      =@type.behaviors.second.problem_names
      %p=link_to @type.behaviors.second.bad, behavior_path("U#{@type.B.symbol}S"), class: "external"
      %p=link_to @type.behaviors.fourth.good, behavior_path("U#{@type.D.symbol}S"), class: "external"

  %tr
    %td #{@type.D.name} & #{@type.A.name} #{GenericProblem.R.name}
    %th ↻
    %td #{@type.B.name} & #{@type.C.name} #{GenericProblem.C.name}

  %tr
    %td
      =@type.behaviors.fourth.problem_names
      %p=link_to @type.behaviors.fourth.bad, behavior_path("G#{@type.D.symbol}E"), class: "external"
      %p=link_to @type.behaviors.second.good, behavior_path("G#{@type.B.symbol}E"), class: "external"

    %td #{@type.D.name} & #{@type.C.name} #{GenericProblem.D.name}

    %td.left
      =@type.behaviors.third.problem_names
      %p=link_to @type.behaviors.third.bad, behavior_path("G#{@type.C.symbol}S"), class: "external"
      %p=link_to @type.behaviors.first.good, behavior_path("G#{@type.A.symbol}S"), class: "external"
%p
  The first statement in each corner is true
  %em but
  the second statement is false.
%p The way to prevent the four true first statements is to replace the opposite second statements with their two corners.


%table
  %tr
    %td
      %p
        try
        %em to
        =link_to @type.behaviors.second.horizontal.name, behavior_path("U#{@type.B.symbol}E"), class: "external"
      %p
        try
        %em to
        =link_to @type.behaviors.fourth.vertical.name, behavior_path("U#{@type.D.symbol}E"), class: "external"
      %p
        try to
        %em not
        =link_to @type.behaviors.third.opposite.name, behavior_path("U#{@type.C.symbol}E"), class: "external"
      %p
        and you
        %em will
        not
        =link_to @type.behaviors.first.name, behavior_path("U#{@type.A.symbol}E"), class: "external"
    %th

    %td
      %p
        try
        %em to
        =link_to @type.behaviors.first.horizontal.name, behavior_path("U#{@type.A.symbol}S"), class: "external"
      %p
        try
        %em to
        =link_to @type.behaviors.third.vertical.name, behavior_path("U#{@type.C.symbol}S"), class: "external"
      %p
        try to
        %em not
        =link_to @type.behaviors.fourth.opposite.name, behavior_path("U#{@type.D.symbol}S"), class: "external"
      %p
        and you
        %em will
        not
        =link_to @type.behaviors.second.name, behavior_path("U#{@type.B.symbol}S"), class: "external"
  %tr
    %th
    %th ↻
    %th

  %tr
    %td
      %p
        try
        %em to
        =link_to @type.behaviors.first.vertical.name, behavior_path("G#{@type.A.symbol}E"), class: "external"
      %p
        try
        %em to
        =link_to @type.behaviors.third.horizontal.name, behavior_path("G#{@type.C.symbol}E"), class: "external"
      %p
        try to
        %em not
        =link_to @type.behaviors.second.opposite.name, behavior_path("G#{@type.B.symbol}E"), class: "external"
      %p
        and you
        %em will
        not
        =link_to @type.behaviors.fourth.name, behavior_path("G#{@type.D.symbol}E"), class: "external"

    %th

    %td.left
      %p
        try
        %em to
        =link_to @type.behaviors.second.vertical.name, behavior_path("G#{@type.B.symbol}S"), class: "external"
      %p
        try
        %em to
        =link_to @type.behaviors.fourth.horizontal.name, behavior_path("G#{@type.D.symbol}S"), class: "external"
      %p
        try to
        %em not
        =link_to @type.behaviors.first.opposite.name, behavior_path("G#{@type.A.symbol}S"), class: "external"
      %p
        and you
        %em will
        not
        =link_to @type.behaviors.third.name, behavior_path("G#{@type.C.symbol}S"), class: "external"
